package components

import "github.com/UnikMask/gofeedsite/model"
import "fmt"
import "github.com/UnikMask/gofeedsite/auth"

templ PostStyles() {
	<style>
        .like-counter {
            opacity: 1;
            transition: opacity 200ms ease-in;
        }
        .like-counter.htmx-swapping {
            opacity: 0;
            transition: opacity 200ms ease-out;
        }
        .animate-liked {
            font-variation-settings: 'FILL' 1;
        }
        .animate-liked.htmx-swapping {
            font-variation-settings: 'FILL' 0;
            transition: all 200ms ease-out;
        }
        .animate-unliked {
            font-variation-settings: 'FILL' 0;
        }
        .animate-unliked.htmx-swapping {
            font-variation-settings: 'FILL' 1;
            transition: all 200ms ease-out;
        }
        .post-card {
            opacity: 1;
            transition: opacity 200ms ease-in;
        }
        .post-card.htmx-settling {
            opacity: 0;
        }
    </style>
}

templ LikeCounter(post_id int, amount int) {
	<div
		hx-get={ model.ENDPOINT_POSTS + "/" + fmt.Sprintf("%d", post_id) + "/likes" }
		hx-swap="outerHTML swap:200ms"
		hx-trigger="revealed delay:5s"
		class="text-gray-400 dark:text-slate-600 like-counter"
	>
		{ model.GetLikesString(amount) } likes
	</div>
}

func GetLikeButtonAnimationClass(liked bool) string {
	if liked {
		return "animate-liked"
	}
	return "animate-unliked"
}

templ LikeButton(p model.Post) {
	<div class={ "flex flex-row " + GetLikeButtonAnimationClass(p.Liked) }>
		@ActionButton(p.GetEndpoint("/like"), BUTTON_TYPE_NONE, BUTTON_SIZE_MD, "closest div",
			"outerHTML swap:200ms") {
			<span class="material-symbols-outlined">favorite</span>
		}
		@LikeCounter(p.Id, p.Likes)
	</div>
}

func GetFollowEndpoint(followee_id int, followed bool) string {
    base := model.ENDPOINT_USERS + "/" + fmt.Sprintf("%d", followee_id)
    if (followed) {
        return base + "/unfollow"
    } else {
        return base + "/follow"
    }
}

templ FollowButton(followee_id int, followed bool) {
    if auth.GetUserFromContextOrNone(ctx).Id != followee_id {
        <div class={ "mt-1 " + GetLikeButtonAnimationClass(followed) }>
            @ActionButton(GetFollowEndpoint(followee_id, followed),
                BUTTON_TYPE_NONE, BUTTON_SIZE_SM, "closest div", "outerHTML swap:200ms") {
                    <div class="material-symbols-outlined" >add_circle</div>
            }
        </div>
    } else {
        <div class="flex flex-col justify-center">
            <div class="flex-0 px-1 font-bold rounded-full bg-black text-sm text-white dark:bg-white dark:text-slate-800">You</div>
        </div>
    }
}

templ ShareButton(p model.Post) {
	<div class="flex flex-row">
		@ActionButton(p.GetEndpoint("/share"), BUTTON_TYPE_NONE, BUTTON_SIZE_MD, "this",
			"outerHTML") {
			<span class="material-symbols-outlined">share</span>
		}
		<div class="text-gray-400 dark:text-slate-600">
			Share
		</div>
	</div>
}

templ PostCard(p model.Post) {
	<div class="post-card w-[40rem] rounded-lg text-lg bg-white dark:bg-slate-800">
		<div class="flex flex-row">
			<div class="my-2 mx-2">
				<div class="rounded-full bg-gray-400 dark:bg-slate-700 w-12 h-12 animate-pulse"></div>
			</div>
			<div class="flex-1 flex flex-col gap-2 mr-4">
                <div class="flex flex-row gap-2 my-1 align-middle">
                    <div class="font-bold">
                        { p.Username }
                    </div>
                    <div class="text-gray-400 dark:text-slate-700">
                        { p.GetDatePostedString() }
                    </div>
                    @FollowButton(p.UserId, p.Followed)
                </div>
                { p.Content }
                <div class="flex flex-row justify-start mt-2 gap-2">
                    @LikeButton(p)
                    @ShareButton(p)
                </div>
			</div>
		</div>
	</div>
}
